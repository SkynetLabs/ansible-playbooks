# Migrate data between secrets storages (plaintext/HashiCorp Vault/LastPass)

- name: "Get user input: Skynet cluster to migrate, source and destination secrets storages"
  hosts: localhost
  gather_facts: False
  any_errors_fatal: True
  tasks:
    - name: Include getting migration inputs from the user
      include_tasks: tasks/secrets-storage-migration-get-inputs.yml

    - name: Show confirmation before migration
      ansible.builtin.pause:
        prompt: |-
          We will migrate secrets records for the following host(s):
          {% for h in hosts_to_migrate %}
            - {{ h }}
          {% endfor %}

          We will migrate cluster(s) with the following cluster IDs:
          {% for c in cluster_ids_to_migrate %}
            - {{ c }}
          {% endfor %}

          From: {{ secrets_storage_from }}
          To:   {{ secrets_storage_to }}

          Press Enter to confirm,
          'n' to abort
      register: confirmation_prompt_result
      failed_when: "'n' in (confirmation_prompt_result.user_input | lower)"

- name: Check if source and destination have the same length of cluster config lists
  hosts: webportals
  gather_facts: False
  any_errors_fatal: True
  vars_files:
    - "{{ common_vars_file }}"
    - "{{ custom_vars_file  }}"
  tasks:
    # Theoretically we need just 1 server per cluster, but e.g. pro cluster has
    # 2 separate configs: for skynetfree and skynetpro. So it's safer to check
    # all migrated servers.
    - name: Skip hosts we don't want to migrate
      meta: end_host
      when: inventory_hostname not in hostvars.localhost.hosts_to_migrate

    # Handle destination

    - name: Set secrets storage to destination
      set_fact:
        secrets_storage: "{{ hostvars.localhost.secrets_storage_to }}"

    - name: Get destination cluster config list name
      set_fact:
        cluster_config_list_name_to: "{{ hostvars.localhost.secrets_storage_to_var_prefix + '_portal_common_and_cluster_configs_list' }}"

    - name: Get destination cluster config list
      set_fact:
        cluster_config_list_to: "{{ lookup('vars', cluster_config_list_name_to) }}"

    # Handle source

    - name: Set secrets storage to source
      set_fact:
        secrets_storage: "{{ hostvars.localhost.secrets_storage_from }}"

    - name: Get source cluster config list name
      set_fact:
        cluster_config_list_name_from: "{{ hostvars.localhost.secrets_storage_from_var_prefix + '_portal_common_and_cluster_configs_list' }}"

    - name: Get source cluster config list
      set_fact:
        cluster_config_list_from: "{{ lookup('vars', cluster_config_list_name_from) }}"

    # Handle if source/destination config lists have different lengths

    - name: Check source and destination cluster config list lengths
      set_fact:
        cluster_config_list_lengths_differ: "{{ cluster_config_list_from | length != cluster_config_list_to | length }}"

    - name: Skip hosts that have same cluster config list lengths on source and destination
      meta: end_host
      when: not cluster_config_list_lengths_differ

    - name: Create group of failed hosts (config lists differ)
      ansible.builtin.group_by:
        key: config_list_lengths_differ_group

- name: Fail if some clusters configs lists are not setup correctly between source and destination
  hosts: localhost
  gather_facts: False
  any_errors_fatal: True
  tasks:
    - name: Skip if cluster configs seem to be ok between source and destination
      meta: end_host
      when: groups.config_list_lengths_differ_group | default([]) | length == 0

    - name: Initialize list of failed clusters
      ansible.builtin.set_fact:
        config_list_lengths_differ_clusters: []

    - name: Get list of failed clusters
      vars:
        cid: "{{ hostvars[item].portal_cluster_id }}"
      ansible.builtin.set_fact:
        config_list_lengths_differ_clusters: "{{ config_list_lengths_differ_clusters + [cid] }}"
      when: cid not in config_list_lengths_differ_clusters
      loop: "{{ groups.config_list_lengths_differ_group }}"

    - name: Fail if some clusters have different config list lengths between source and destination
      ansible.builtin.fail:
        # Theoretically we could list just cluster differences, but some
        # clusters can have subclasters with different config lists (e.g.
        # skynetfree/skynetpro), so it is safer to list all hosts under each
        # cluster.
        msg: |
          Following hosts have different cluster config list lengths between
          source and destination secrets storages:

          {% for cid in config_list_lengths_differ_clusters %}
          - cluster ID: {{ cid }}
          {% for h in groups.config_list_lengths_differ_group %}
          {% if hostvars[h].portal_cluster_id == cid %}
              - host: {{ h }}
                  FROM: {{ hostvars[h].cluster_config_list_name_from }}
          {% for cli in hostvars[h].cluster_config_list_from %}
                      - {{ cli }}
          {% endfor %}
                  TO: {{ hostvars[h].cluster_config_list_name_to }}
          {% for cli in hostvars[h].cluster_config_list_to %}
                      - {{ cli }}
          {% endfor %}
          {% endif %}
          {% endfor %}
          {% endfor %}

          Ansible can't migrate cluster configs for these clusters/hosts.

          You should configure your clusters
          so that the above cluster config lists have the same length
          and then you can rerun the migration playbook.

- name: Get Accounts JWKS config list to migrate (if defined in source)
  hosts: webportals
  gather_facts: False
  any_errors_fatal: True
  vars_files:
    - "{{ common_vars_file }}"
    - "{{ custom_vars_file  }}"
  tasks:
    # Theoretically we need just 1 server per cluster, but e.g. pro cluster has
    # 2 separate configs: for skynetfree and skynetpro. So it's safer to check
    # all migrated servers.
    - name: Skip hosts we don't want to migrate
      meta: end_host
      when: inventory_hostname not in hostvars.localhost.hosts_to_migrate

    # Handle source

    - name: Set secrets storage to source
      ansible.builtin.set_fact:
        secrets_storage: "{{ hostvars.localhost.secrets_storage_from }}"

    - name: Get source Accounts JWKS cluster config name
      ansible.builtin.set_fact:
        jwks_cluster_config_name_from: "{{ hostvars.localhost.secrets_storage_from_var_prefix + '_accounts_jwks_json' }}"

    - name: Skip if Accounts JWKS config is not defined in source
      vars:
        undefined_value: "jwks_cluster_config_name_from is undefined"
      meta: end_host
      when: lookup('vars', 'jwks_cluster_config_name_from', default=undefined_value) == undefined_value

    - name: Set source Accounts JWKS cluster config path
      ansible.builtin.set_fact:
        jwks_cluster_config_path_from: "{{ lookup('vars', jwks_cluster_config_name_from) }}"


    # Handle destination

    - name: Set secrets storage to destination
      ansible.builtin.set_fact:
        secrets_storage: "{{ hostvars.localhost.secrets_storage_to }}"

    - name: Get destination Accounts JWKS cluster config name
      ansible.builtin.set_fact:
        jwks_cluster_config_name_to: "{{ hostvars.localhost.secrets_storage_to_var_prefix + '_accounts_jwks_json' }}"

    - name: Set destination Accounts JWKS cluster config path
      ansible.builtin.set_fact:
        jwks_cluster_config_path_to: "{{ lookup('vars', jwks_cluster_config_name_to) }}"

    # Create group to iterate over
    - name: Create group of hosts with defined Accounts JWKS config in source
      ansible.builtin.group_by:
        key: jwks_config_exists_group

# xxxqqq todo: Fail if cluster config paths are not matching 1:1 for all hosts

- name: Fail if Accounts JWKS config paths are not matching 1:1 for all hosts
  hosts: localhost
  gather_facts: False
  any_errors_fatal: True
  tasks:
    - name: Initialize a list of Accounts JWKS configs to migrate
      ansible.builtin.set_fact:
        jwks_configs_to_migrate: []

    - name: Populate a list of Accounts JWKS configs to migrate
      vars:
        current_from_to:
          from: "{{ hostvars[item].jwks_cluster_config_path_from }}"
          to: "{{ hostvars[item].jwks_cluster_config_path_to }}"
        current_hosts_list_of_list: >-
          {{
            jwks_configs_to_migrate
            | selectattr('from_to', '==', current_from_to)
            | map(attribute='hosts')
          }}
        current_hosts: >-
          {{
            current_hosts_list_of_list | first
            if current_hosts_list_of_list | length > 0
            else []
          }}
      ansible.builtin.set_fact:
        jwks_configs_to_migrate: >-
          {{
            jwks_configs_to_migrate |
              rejectattr('from_to', '==', current_from_to)
              +
              [{'from_to': current_from_to, 'hosts': current_hosts + [item]}]
          }}
      loop: "{{ groups.jwks_config_exists_group }}"

    - name: Check Accounts JWKS config source path always maps to the same destination path
      vars:
        jwks_from_list: >-
          {{
            jwks_configs_to_migrate
            | map(attribute='from_to')
            | map(attribute='from')
          }}
      ansible.builtin.fail:
        msg: |
          It seems you have misconfigured Accounts JWKS between source and destination.
          The following source (from) paths do not map to the same destination (to) path:
          {% for from_path in jwks_from_list | unique %}
          {% set config_list = [] %}
          {% for config in jwks_configs_to_migrate %}
          {% if from_path == config.from_to.from %}
          {% set __ = config_list.append(config) %}
          {% endif %}
          {% endfor %}
          {% if config_list | length > 1 %}
          {{ config_list | to_nice_yaml }}
          {% endif %}
          {% endfor %}
      when: jwks_from_list | length != jwks_from_list | unique | length

    - name: Check Accounts JWKS config destination path always maps to the same from path
      vars:
        jwks_to_list: >-
          {{
            jwks_configs_to_migrate
            | map(attribute='from_to')
            | map(attribute='to')
          }}
      ansible.builtin.fail:
        msg: |
          It seems you have misconfigured Accounts JWKS between source and destination.
          The following destination (to) paths do not map to the same source (from) path:
          {% for to_path in jwks_to_list | unique %}
          {% set config_list = [] %}
          {% for config in jwks_configs_to_migrate %}
          {% if to_path == config.from_to.to %}
          {% set __ = config_list.append(config) %}
          {% endif %}
          {% endfor %}
          {% if config_list | length > 1 %}
          {{ config_list | to_nice_yaml }}
          {% endif %}
          {% endfor %}
      when: jwks_to_list | length != jwks_to_list | unique | length

# xxxqqq todo: Create group to migrate cluster configs 

- name: Create group to migrate Accounts JWKS configs
  hosts: webportals
  gather_facts: False
  any_errors_fatal: True
  vars_files:
    - "{{ common_vars_file }}"
    - "{{ custom_vars_file  }}"
  tasks:
    - name: Check if host is the first host in config to migrate hosts list
      ansible.builtin.set_fact:
        first_host: "{{ first_host | default(False) or inventory_hostname == item | first }}"
      loop: "{{ hostvars.localhost.jwks_configs_to_migrate | map(attribute='hosts') }}"

    - name: Skip hosts that we don't want them to migrate Accounts JWKS configs
      meta: end_host
      when: not first_host

    - name: Create group to migrate JWKS configs
      ansible.builtin.group_by:
        key: jwks_config_migration_group

# xxxqqq todo: Check source and destination cluster configs are synced (if exist)

# xxxqqq todo: Fail if some cluster configs do not match between source and destination

- name: Check source and destination Accounts JWKS configs are synced (if exist)
  hosts: jwks_config_migration_group
  gather_facts: False
  any_errors_fatal: True
  vars_files:
    - "{{ common_vars_file }}"
    - "{{ custom_vars_file  }}"
  tasks:
    # Handle destination

    - name: Set secrets storage to destination
      set_fact:
        secrets_storage: "{{ hostvars.localhost.secrets_storage_to }}"

    - name: Include checking if JWKS config record exist
      include_tasks: tasks/secrets-storage-common-check-record-exists.yml
      vars:
        secret_path: "{{ lookup('vars', hostvars.localhost.secrets_storage_to_var_prefix + '_accounts_jwks_json') }}"

    - name: Skip hosts that don't have existing JWKS config record in destination
      meta: end_host
      when: not secrets_storage_record_exists

    - name: Include loading JWKS config from destination
      include_tasks: "tasks/secrets-storage-common-load-yaml-or-json.yml"
      loop:
        # Set `secret_path` according to `{{secret_storage}}_accounts_jwks_json`
        # variable
        - secret_path: "{{ lookup('vars', hostvars.localhost.secrets_storage_to_var_prefix + '_accounts_jwks_json') }}"
          var_name: jwks_cluster_config_to

    # Handle source

    - name: Set secrets storage to source
      set_fact:
        secrets_storage: "{{ hostvars.localhost.secrets_storage_from }}"

    - name: Include loading JWKS config from source
      include_tasks: "tasks/secrets-storage-common-load-yaml-or-json.yml"
      loop:
        # Set `secret_path` according to `{{secret_storage}}_accounts_jwks_json`
        # variable
        - secret_path: "{{ lookup('vars', hostvars.localhost.secrets_storage_from_var_prefix + '_accounts_jwks_json') }}"
          var_name: jwks_cluster_config_from

    # Handle if source/destination configs are different

    - name: Check source and destination configs
      vars:
        original_dict: "{{ jwks_cluster_config_from }}"
        new_dict: "{{ jwks_cluster_config_to }}"
      include_tasks: tasks/dictionary-diff.yml

    - name: Skip hosts that have same JWKS configs on source and destination
      meta: end_host
      when: not different_dict

    - debug:
        msg: |
          Cluster with cluster ID: {{ portal_cluster_id }}

          has different JWKS configs between
          source secrets storage: {{ hostvars.localhost.secrets_storage_from }}
          and destination secrets storage: {{ hostvars.localhost.secrets_storage_to }}

          {{ diff_string }}

    - name: Create group of failed hosts (jwks configs differ)
      ansible.builtin.group_by:
        key: jwks_configs_differ_group

- name: Fail if some JWKS configs do not match between source and destination
  hosts: localhost
  gather_facts: False
  any_errors_fatal: True
  tasks:
    - name: Skip if JWKS configs seem to be ok between source and destination
      meta: end_host
      when: groups.jwks_configs_differ_group | default([]) | length == 0

    - name: Fail if some clusters have unsynced JWKS configs between source and destination
      ansible.builtin.fail:
        msg: |
          The clusters with the following cluster IDs:
          {% for h in groups.jwks_configs_differ_group %}
            - {{ hostvars[h]['portal_cluster_id'] }}
          {% endfor %}
          have different JWKS configs between source and destination secrets storages
          FROM: {{ secrets_storage_from }}
          TO: {{ secrets_storage_to }}

          For details see diff logs above.

          Ansible can't determine which JWKS config is obsolete and which is current
          for the above hosts.

          You should sync the JWKS configs for the above clusters manually
          and then you can rerun the migration playbook.

# xxxqqq todo: Migrate cluster configs

- name: Migrate Accounts JWKS configs
  hosts: jwks_config_migration_group
  gather_facts: False
  any_errors_fatal: True
  vars_files:
    - "{{ common_vars_file }}"
    - "{{ custom_vars_file  }}"
  tasks:
    # Read from source

    - name: Set secrets storage to source
      set_fact:
        secrets_storage: "{{ hostvars.localhost.secrets_storage_from }}"

    - name: Include loading JWKS config from source
      include_tasks: "tasks/secrets-storage-common-load-yaml-or-json.yml"
      loop:
        # Set `secret_path` according to `{{secret_storage}}_accounts_jwks_json`
        # variable
        - secret_path: "{{ lookup('vars', hostvars.localhost.secrets_storage_from_var_prefix + '_accounts_jwks_json') }}"
          var_name: jwks_cluster_config_from

    # Write to destination

    - name: Set secrets storage to destination
      set_fact:
        secrets_storage: "{{ hostvars.localhost.secrets_storage_to }}"

    - name: Include saving JWKS config data to destination
      include_tasks: "tasks/secrets-storage-common-save-data-to-yaml-or-json.yml"
      vars:
        secret_path: "{{ lookup('vars', hostvars.localhost.secrets_storage_to_var_prefix + '_accounts_jwks_json') }}"
        secret_data: "{{ jwks_cluster_config_from }}"

# xxxqqq remove play below if rewritten above
# Every migrated host checks:
# - If its cluster config(s) in destination already exist
# - If exist, it has the same values as source (if they are synced)
# - If not synced: Stop because we don't know which (source/destination) cluster config is valid
- name: Check if cluster configs are synced (if destination cluster config exists)
  hosts: webportals
  gather_facts: False
  any_errors_fatal: True
  vars_files:
    - "{{ common_vars_file }}"
    - "{{ custom_vars_file  }}"
  tasks:
    # Theoretically we need just 1 server per cluster, but e.g. pro cluster has
    # 2 separate configs: for skynetfree and skynetpro. So it's safer to check
    # all migrated servers.
    - name: Skip hosts we don't want to migrate
      meta: end_host
      when: inventory_hostname not in hostvars.localhost.hosts_to_migrate

    - name: Initialize not synced cluster configs on the host
      ansible.builtin.set_fact:
        cluster_configs_different: []

    # Note: We expect `cluster_config_list_from`, `cluster_config_list_to` were
    # already set for the host
    - name: Include checking if cluster configs exist for the host on destination
      include_tasks: tasks/secrets-storage-migration-check-cluster-config.yml
      loop: "{{ range(cluster_config_list_to | length) | list }}"
      loop_control:
        loop_var: "cluster_config_index"

    - name: Skip hosts that don't have destination cluster config or have their destination cluster config synced with source
      meta: end_host
      when: cluster_configs_different | length == 0

    - name: Create group of failed hosts (config lists differ)
      ansible.builtin.group_by:
        key: cluster_configs_differ_group

- name: Fail if some hosts have destination clusters configs that are not synced with source
  hosts: localhost
  gather_facts: False
  any_errors_fatal: True
  tasks:
    - name: Skip if cluster configs seem to be ok between source and destination
      meta: end_host
      when: groups.cluster_configs_differ_group | default([]) | length == 0

    - name: Initialize list of failed clusters
      ansible.builtin.set_fact:
        cluster_configs_differ_clusters: []

    - name: Get list of failed clusters
      vars:
        cid: "{{ hostvars[item].portal_cluster_id }}"
      ansible.builtin.set_fact:
        cluster_configs_differ_clusters: "{{ cluster_configs_differ_clusters + [cid] }}"
      when: cid not in cluster_configs_differ_clusters
      loop: "{{ groups.cluster_configs_differ_group }}"

    - name: Fail if some hosts have destination cluster config that is different from source
      ansible.builtin.fail:
        # Theoretically we could list just cluster differences, but some
        # clusters can have subclasters with different config lists (e.g.
        # skynetfree/skynetpro), so it is safer to list all hosts under each
        # cluster.
        msg: |
          Following hosts have already cluster config in destination secure storage,
          but it is different from cluster config in source secret storage:

          {% for cid in cluster_configs_differ_clusters %}
          - cluster ID: {{ cid }}
          {% for h in groups.cluster_configs_differ_group %}
          {% if hostvars[h].portal_cluster_id == cid %}
              - HOST: {{ h }}
          {% for ccd in hostvars[h].cluster_configs_different %}
                  - FROM {{ secrets_storage_from }}: {{ ccd.from }}
                    TO {{ secrets_storage_to }}: {{ ccd.from }}
          {% endfor %}
          {% endif %}
          {% endfor %}
          {% endfor %}

          You should have logs with all differences between source and cluster
          configs for these hosts above.

          Ansible can't migrate cluster configs for these clusters/hosts.

          Either your cluster config paths are not defined correctly:
          - In this case fix the failing clusters/hosts configuration.

          Or your cluster configs are not in sync between source and destination
          and Ansible can't determine which of them is valid and which is obsolete:
          - In this case sync failing clusters configs manually.

          Then you can rerun the migration playbook.

# xxxqqq implement migration of cluster configs and jwks

- name: Check if destination server credential records exist and do not differ from the source
  hosts: webportals
  gather_facts: False
  any_errors_fatal: True
  vars_files:
    - "{{ common_vars_file }}"
    - "{{ custom_vars_file  }}"
  tasks:
    - name: Skip hosts we don't want to migrate
      meta: end_host
      when: inventory_hostname not in hostvars.localhost.hosts_to_migrate

    # Handle destination

    - name: Set secrets storage to destination
      set_fact:
        secrets_storage: "{{ hostvars.localhost.secrets_storage_to }}"

    - name: Include checking if server credentials record exist
      include_tasks: tasks/secrets-storage-common-check-record-exists.yml
      vars:
        secret_path: "{{ lookup('vars', hostvars.localhost.secrets_storage_to_var_prefix + '_portal_credentials_server') }}"

    - name: Skip hosts that don't have existing credentials record in destination
      meta: end_host
      when: not secrets_storage_record_exists

    - name: Include loading server credentials from destination
      include_tasks: tasks/secrets-storage-common-load-user-credentials.yml

    - name: Get destination password
      set_fact:
        pass_to: "{{ ansible_become_pass }}"

    # Handle source

    - name: Set secrets storage to source
      set_fact:
        secrets_storage: "{{ hostvars.localhost.secrets_storage_from }}"

    - name: Include loading server credentials from source
      include_tasks: tasks/secrets-storage-common-load-user-credentials.yml
    
    - name: Get source password
      set_fact:
        pass_from: "{{ ansible_become_pass }}"

    # Handle if source/destination passwords are different

    - name: Check source and destination passwords
      set_fact:
        pass_differs: "{{ pass_from != pass_to }}"

    - name: Skip hosts that have same passwords on source and destination
      meta: end_host
      when: not pass_differs

    - name: Create group of failed hosts (passwords differ)
      ansible.builtin.group_by:
        key: passwords_differ_group

- name: Fail if some server passwords do not match between source and destination
  hosts: localhost
  gather_facts: False
  any_errors_fatal: True
  tasks:
    - name: Skip if server passwords seem to be ok between source and destination
      meta: end_host
      when: groups.passwords_differ_group | default([]) | length == 0

    - name: Fail if some hosts have unsynced passwords between source and destination
      ansible.builtin.fail:
        msg: |
          The following hosts:
          {% for h in groups.passwords_differ_group %}
            - {{ h }}
          {% endfor %}
          have different passwords between
          secrets storages
          FROM: {{ secrets_storage_from }}
          TO: {{ secrets_storage_to }}

          Ansible can't determine which password is obsolete and which is current
          for the above hosts.

          You should sync the passwords for the above hosts manually
          and then you can rerun the migration playbook.

- name: Check if destination server config records exist and do not differ from the source
  hosts: webportals
  gather_facts: False
  any_errors_fatal: True
  vars_files:
    - "{{ common_vars_file }}"
    - "{{ custom_vars_file  }}"
  tasks:
    - name: Skip hosts we don't want to migrate
      meta: end_host
      when: inventory_hostname not in hostvars.localhost.hosts_to_migrate

    # Handle destination

    - name: Set secrets storage to destination
      set_fact:
        secrets_storage: "{{ hostvars.localhost.secrets_storage_to }}"

    - name: Include checking if server config record exist
      include_tasks: tasks/secrets-storage-common-check-record-exists.yml
      vars:
        secret_path: "{{ lookup('vars', hostvars.localhost.secrets_storage_to_var_prefix + '_portal_config_server') }}"

    - name: Skip hosts that don't have existing config record in destination
      meta: end_host
      when: not secrets_storage_record_exists

    - name: Include loading server config from destination
      include_tasks: "tasks/secrets-storage-common-load-yaml-or-json.yml"
      loop:
        # Set `secret_path` according to `{{secret_storage}}_portal_config_server`
        # variable
        - secret_path: "{{ lookup('vars', hostvars.localhost.secrets_storage_to_var_prefix + '_portal_config_server') }}"
          var_name: webportal_server_config_to

    # Handle source

    - name: Set secrets storage to source
      set_fact:
        secrets_storage: "{{ hostvars.localhost.secrets_storage_from }}"

    - name: Include loading server config from source
      include_tasks: "tasks/secrets-storage-common-load-yaml-or-json.yml"
      loop:
        # Set `secret_path` according to `{{secret_storage}}_portal_config_server`
        # variable
        - secret_path: "{{ lookup('vars', hostvars.localhost.secrets_storage_from_var_prefix + '_portal_config_server') }}"
          var_name: webportal_server_config_from

    # Handle if source/destination configs are different

    - name: Check source and destination configs
      vars:
        original_dict: "{{ webportal_server_config_from }}"
        new_dict: "{{ webportal_server_config_to }}"
      include_tasks: tasks/dictionary-diff.yml

    - name: Skip hosts that have same configs on source and destination
      meta: end_host
      when: not different_dict

    - debug:
        msg: |
          Host: {{ inventory_hostname }}

          has different configs between
          source secrets storage: {{ hostvars.localhost.secrets_storage_from }}
          and destination secrets storage: {{ hostvars.localhost.secrets_storage_to }}

          {{ diff_string }}

    - name: Create group of failed hosts (server configs differ)
      ansible.builtin.group_by:
        key: server_configs_differ_group

- name: Fail if some server configs do not match between source and destination
  hosts: localhost
  gather_facts: False
  any_errors_fatal: True
  tasks:
    - name: Skip if server configs seem to be ok between source and destination
      meta: end_host
      when: groups.server_configs_differ_group | default([]) | length == 0

    - name: Fail if some hosts have unsynced server configs between source and destination
      ansible.builtin.fail:
        msg: |
          The following hosts:
          {% for h in groups.server_configs_differ_group %}
            - {{ h }}
          {% endfor %}
          have different configs between source and destination secrets storages
          FROM: {{ secrets_storage_from }}
          TO: {{ secrets_storage_to }}

          For details see diff logs above.

          Ansible can't determine which config is obsolete and which is current
          for the above hosts.

          You should sync the configs for the above hosts manually
          and then you can rerun the migration playbook.

- name: Migrate server credentials and configs to destination
  hosts: webportals
  gather_facts: False
  any_errors_fatal: True
  vars_files:
    - "{{ common_vars_file }}"
    - "{{ custom_vars_file  }}"
  tasks:
    - name: Skip hosts we don't want to migrate
      meta: end_host
      when: inventory_hostname not in hostvars.localhost.hosts_to_migrate

    # Read from source

    - name: Set secrets storage to source
      set_fact:
        secrets_storage: "{{ hostvars.localhost.secrets_storage_from }}"

    - name: Include loading server credentials from source
      include_tasks: tasks/secrets-storage-common-load-user-credentials.yml
    
    - name: Get source password
      set_fact:
        pass_from: "{{ ansible_become_pass }}"

    - name: Include loading server config from source
      include_tasks: "tasks/secrets-storage-common-load-yaml-or-json.yml"
      loop:
        # Set `secret_path` according to `{{secret_storage}}_portal_config_server`
        # variable
        - secret_path: "{{ lookup('vars', hostvars.localhost.secrets_storage_from_var_prefix + '_portal_config_server') }}"
          var_name: webportal_server_config

    # Write to destination

    - name: Set secrets storage to destination and set password to source
      set_fact:
        secrets_storage: "{{ hostvars.localhost.secrets_storage_to }}"
        ansible_become_pass: "{{ pass_from }}"

    - name: Include creating OS user credentials in secrets storage (if missing)
      include_tasks: tasks/secrets-storage-common-save-user-credentials.yml

    - name: Include saving server config data to destination
      include_tasks: "tasks/secrets-storage-common-save-data-to-yaml-or-json.yml"
      vars:
        secret_path: "{{ lookup('vars', hostvars.localhost.secrets_storage_to_var_prefix + '_portal_config_server') }}"
        secret_data: "{{ webportal_server_config }}"
