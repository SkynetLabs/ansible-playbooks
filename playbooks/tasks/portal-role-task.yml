---
# TODO: This ansible playbook task, should be moved to portal role

- name: Checkout skynet-webportal repository
  ansible.builtin.git:
    repo: "{{ webportal_repo_url }}"
    dest: "{{ webportal_dir }}"
    version: "{{ portal_repo_version }}"
    update: True
    force: True

# TODO: add subdomain check (only install portal to subdomain for now)

- name: Create .env file
  ansible.builtin.template:
    src: .env.j2
    dest: "{{ webportal_dir }}/.env"
  register: create_env_file_result

# Autogenerate JWKS config data (if not done)
# Do not run this in parallel (use throttle = 1) so that there are not
# created and used multiple JWKS data for a single cluster
- block:
    - name: Include loading JWKS data fresh from secrets storage
      include_tasks: tasks/secrets-storage-common-load-yaml-or-json.yml
      loop:
        # Set `secret_path` according to `{{secret_storage}}_accounts_jwks_json`
        # variable
        - secret_path: "{{ lookup('vars', secrets_storage_var_prefix + '_accounts_jwks_json') }}"
          var_name: accounts_jwks_data

    - name: Set generate JWKS data flag
      set_fact:
        generate_jwks: "{{ accounts_jwks_data | default({}) == {} or accounts_jwks_data == '' }}"

    # Autogenerate JWKS data and save it to secrets storage (if not yet done)
    - block:
        - name: Include generating jwks.json file
          include_tasks: tasks/portal-accounts-generate-jwks.json.yml

        - name: Include saving cluster jwks.json to secure storage
          include_tasks: "tasks/secrets-storage-common-save-data-to-yaml-or-json.yml"
          vars:
            secret_path: "{{ lookup('vars', secrets_storage_var_prefix + '_accounts_jwks_json') }}"
            secret_data: "{{ accounts_jwks_data }}"
      when: generate_jwks
  when: portal_accounts_on
  throttle: 1

# Create JWKS file for accounts
- block:
    - name: Ensure accounts/conf directory exists
      ansible.builtin.file:
        path: "{{ accounts_conf_dir }}"
        state: directory

    - name: Create jwks.json file
      ansible.builtin.copy:
        dest: "{{ accounts_jwks_path }}"
        content: "{{ accounts_jwks_data }}"
      become: True
  when: portal_accounts_on

# Fix permissions for elastic search if Jaeger is on
- block:
    - name: Ensure docker/data/elasticsearch/data directory is present
      ansible.builtin.file:
        path: "{{ elasticsearch_data_data_dir }}"
        state: directory
        owner: "1000"
        group: "1000"
        recurse: True
      become: True
  when: portal_jaeger_on

# Set portal versions now, especially because we need to correctly configure
# mongo service in docker-compose.override.yml so that we can start it
# correctly even before the full stack deployment is done.
- name: Include setting portal versions (needed for mongo service)
  include_tasks: tasks/portal-versions-set.yml

# Setup MongoDB
# NOTE: MongoDB docker service must be setup before Sia docker service, because
# skyd depends on mongo.
- name: Include setting up MongoDB
  include_tasks: tasks/portal-role-task-mongo-setup.yml

# Custom DNS Handling for Certbot
# When the AWS keys are not set, check for other DNS configs for certbot.
- name: Custom Certbot DNS
  include_tasks: tasks/portal-role-task-certbot-custom-dns.yml
  when: webportal_common_config.aws_access_key is not defined and webportal_common_config.aws_secret_access_key is not defined

# Init, unlock wallet

# Don't rebuild sia container (keep it running)

- name: Get sia container status
  docker_container_info:
    name: sia
  register: sia_container_info_result

- name: Create portal setup status directory
  ansible.builtin.file:
    path: "{{ setup_status_dir }}"
    state: directory

- name: Create portal setup status file if not exists
  copy:
    content: ""
    dest: "{{ setup_status_file }}"
    force: no

# TODO: Unite Load and Get into a role task: load portal setup status
- name: Load portal setup status file
  ansible.builtin.slurp:
    src: "{{ setup_status_file }}"
  register: setup_status_slurped
- name: Get portal setup status
  set_fact:
    setup_status: "{{ setup_status_slurped.content | b64decode }}"

- block:
    - name: Start docker sia service
      ansible.builtin.command: "chdir={{ webportal_dir }} ./dc up --remove-orphans --detach sia"
      become: True
      become_user: "{{ webportal_user }}"

    - name: Wait for sia API to become available
      ansible.builtin.command: docker logs sia
      register: sia_logs_result
      until: "'API is now available, synchronous startup completed in' in sia_logs_result.stdout"
      delay: 1
      retries: 300

    - name: Update portal setup status
      ansible.builtin.copy:
        dest: "{{ setup_status_file }}"
        content: ""

  # Don't rebuild when initializing sia with existing seed is in progress
  when: create_env_file_result.changed or sia_container_info_result.container == None or not sia_container_info_result.container.State.Running

- name: Check wallet
  command: docker exec sia siac wallet
  register: sia_wallet_result
  until: "'Wallet status:' in sia_wallet_result.stdout"
  delay: 1
  retries: 120

- name: Set wallet initialized
  set_fact:
    sia_wallet_initialized: "{{ 'Unencrypted,' not in sia_wallet_result.stdout }}"

- name: Set Sia wallet seed defined
  set_fact:
    sia_wallet_seed_defined: >-
      {{
        webportal_server_config.sia_wallet_seed is defined
        and
        webportal_server_config.sia_wallet_seed != None
        and
        webportal_server_config.sia_wallet_seed != ''
      }}

# Init a wallet with existing seed

# TODO: (2nd appearance) unite Load and Get into a role task: load portal setup status
- name: Load portal setup status file
  ansible.builtin.slurp:
    src: "{{ setup_status_file }}"
  register: setup_status_slurped
- name: Get portal setup status
  set_fact:
    setup_status: "{{ setup_status_slurped.content | b64decode }}"

# Init from Seed Block
#
# We want to initialize the wallet from a seed if:
#   - The wallet is not initialized already
#   - The wallet seed is defined
#   - The use_existing_sia_seed_if_exists variable is set to True
#   - The setup_status is not 'initializing'
- block:
    # Check that the Sia Blockchain is synced
    - name: Check Sia blockchain sync status
      command: docker exec sia siac consensus
      register: siac_consensus_result
      until: "'Synced: Yes' in siac_consensus_result.stdout"
      delay: 30
      retries: 20
      failed_when: False

    - name: Check if the Sia blockchain is synced
      fail:
        msg: |
          Initializing Sia wallet from Seed requires Sia blockchain to be synced:
          Sia blockchain is not yet synced:

          {{ siac_consensus_result.stdout }}

          Wait for Sia blockchain synced and rerun the playbook.
          To check sync status, execute (on the server):

            docker exec sia siac consensus
      when: "'Synced: Yes' not in siac_consensus_result.stdout"

    - name: Initialize a wallet with existing seed
      ansible.builtin.expect:
        command: docker exec -it sia siac wallet init-seed
        responses:
          Seed: "{{ webportal_server_config.sia_wallet_seed }}"
      register: sia_init_seed_result
      ignore_errors: True
      # Fail on unknown errors, timeout is expected and is handled later.
      failed_when: sia_init_seed_result.rc != 0 and sia_init_seed_result.msg != 'command exceeded timeout'

    - name: "Set portal setup status to initializing wallet with existing seed"
      ansible.builtin.copy:
        dest: "{{ setup_status_file }}"
        content: "initializing"

  when: not sia_wallet_initialized and sia_wallet_seed_defined and use_existing_sia_seed_if_exists and setup_status != 'initializing'

# Init a new wallet
- block:
    - name: Init a new wallet
      ansible.builtin.command: docker exec sia siac wallet init
      register: wallet_init_result

    - name: Get wallet seed
      set_fact:
        new_sia_wallet_seed: "{{ wallet_init_result.stdout | regex_search('Recovery seed:\\n(.*)\\n', '\\1') | first }}"
      no_log: True

    - name: Update portal config with new seed
      set_fact:
        webportal_server_config: "{{ webportal_server_config | combine(updated) }}"
      vars:
        updated:
          sia_wallet_seed: "{{ new_sia_wallet_seed }}"

    - name: Include saving server config to secrets storage
      include_tasks: tasks/portal-configs-save-server-config.yml

    - name: Update .env file
      ansible.builtin.template:
        src: .env.j2
        dest: "{{ webportal_dir }}/.env"

  when: not sia_wallet_initialized and not (sia_wallet_seed_defined and use_existing_sia_seed_if_exists)

- name: Check wallet
  command: docker exec sia siac wallet
  register: sia_wallet_result

- name: Set Sia wallet is locked
  set_fact:
    sia_wallet_locked: "{{ 'Unlocked' not in sia_wallet_result.stdout }}"

- name: Unlock the wallet
  ansible.builtin.expect:
    command: docker exec -it sia siac wallet unlock
    responses:
      Wallet password: "{{ webportal_server_config.sia_wallet_seed }}"
  when: sia_wallet_locked
  register: sia_wallet_unlock_result
  ignore_errors: True

- name: Fail on all wallet unlock errors except rescan in progress, which is handled later
  fail:
    msg: "Error unlocking Sia wallet:\n\n{{ sia_wallet_unlock_result }}"
  when: sia_wallet_unlock_result.rc | default(0) != 0 and 'another wallet rescan is already underway' not in sia_wallet_unlock_result.stdout

- name: Stop playbook if Sia wallet seed initialization is still in progress
  fail:
    msg: |
      Initializing Sia wallet from existing seed takes some time.

      Wait for Sia wallet initialized and rerun the playbook.
      You can check initialization status, executing (on the server):

        docker exec -it sia siac wallet unlock

      You don't have to unlock the wallet manually,
      as a wallet password you can supply empty string and check you don't
      get the following message:

        Could not unlock wallet: [... another wallet rescan is already underway]

      Alternatively execute (on the server):

        docker logs sia && echo

      to check wallet scan progress.
  when: sia_wallet_unlock_result.rc | default(0) != 0 and 'another wallet rescan is already underway' in sia_wallet_unlock_result.stdout

- name: Reset portal setup status
  ansible.builtin.copy:
    dest: "{{ setup_status_file }}"
    content: ""

# TODO: Create an address?
# - name: Create a new address
#   ansible.builtin.command: docker exec sia siac wallet address
#   register: wallet_address_result
# TODO: Log address

# TODO: Should we setup allowance just once?

# Set Sia allowance

- name: Check if allowance is already set
  ansible.builtin.command: docker exec sia siac renter
  register: get_allowance_result

- name: Set allowance is not set flag
  set_fact:
    # When allowance is not set, command 'docker exec sia siac renter'
    # contains line 'Allowance:      0 SC (No current allowance)'.
    allowance_is_not_set: '{{ get_allowance_result.stdout is match(".*\nAllowance:\s+0 SC \(No current allowance\).*") | bool }}'

- name: Set allowance
  ansible.builtin.command: >
    docker exec sia siac renter setallowance
      --amount {{ webportal_allowance.amount }}
      --expected-storage {{ webportal_allowance.expected_storage }}
      --expected-upload {{ webportal_allowance.expected_upload }}
      --expected-download {{ webportal_allowance.expected_download }}
      --expected-redundancy {{ webportal_allowance.expected_redundancy }}
      --max-contract-price {{ webportal_allowance.max_contract_price }}
      --max-sector-access-price {{ webportal_allowance.max_sector_access_price }}
      --max-storage-price {{ webportal_allowance.max_storage_price }}
      --payment-contract-initial-funding {{ webportal_allowance.payment_contract_initial_funding }}
      --period {{ webportal_allowance.period }}
  register: set_allowance_result
  # Verify result to prevent mistakes and misconfiguration, because
  # setallowance might not fail but just switch to interactive mode.
  failed_when: set_allowance_result.stdout.find("Allowance updated. 10 setting(s) changed.") == -1
  when: allowance_is_not_set

# Setup health checks
# TODO: Move to role task file
- block:
    - name: Install Python modules for health checks
      pip:
        name:
          - discord-webhook==0.15.0
          - python-dotenv==0.20.0
          - requests==2.27.1
          - elasticsearch-curator==5.8.4

    - name: Update hardcoded username in cron file
      ansible.builtin.replace:
        path: "{{ webportal_cron_file }}"
        regexp: "/home/user/"
        replace: "{{ webportal_user_home_dir }}/"

    - name: Add health checks cron entries to user crontab
      command: crontab -u {{ webportal_user }} {{ webportal_cron_file }}

  when: webportal_setup_health_checks

# Setup logrotate for webportal logs
- block:
    - name: List all existing skynet-webportal logrotate configs
      ansible.builtin.find:
        paths: /etc/logrotate.d/
        patterns: "skynet-webportal-*"
      register: existing_logrotate

    - name: Remove all existing skynet-webportal logrotate configs
      file:
        state: absent
        path: "{{ item.path }}"
      loop: "{{ existing_logrotate.files }}"
      become: True

    - name: Check webportal logrotate config directory
      stat:
        path: "{{ webportal_logrotated_dir }}"
      register: logrotate_webportal_dir

    - name: Copy over new skynet-webportal logrotate configs
      command: cp -r {{ webportal_logrotated_dir }}/. /etc/logrotate.d/
      become: True
      when: logrotate_webportal_dir.stat.exists and logrotate_webportal_dir.stat.isdir

# Pull cypress image to avoid lazily pulling it on the fly when the abuse
# scanner needs it
- name: Pull cypress docker image
  community.docker.docker_image:
    name: "{{ cypress_docker_image }}"
    source: pull
