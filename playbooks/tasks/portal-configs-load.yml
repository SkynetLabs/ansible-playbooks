---
# Get portal configs
# - Load portal configs from secrets backend (e.g. LastPass or HashiCorp Vault)
# - Set default values (for unset keys)
# - Set mongodb mgkey (if defined but empty)
# - Set portal modules flag
# - Set mongodb config (if mongodb is on)

- name: Include loading portal config
  include_tasks: tasks/portal-configs-load-subtask.yml

# If the server config hasn't been yet saved to secrets backend, it is loaded
# as undefined now and we set it to empty dictionary.
- name: Set portal config to empty (if it hasn't yet been saved to secrets backend)
  set_fact:
    webportal_server_config: "{{ webportal_server_config | default({}) }}"

- name: Set portal config missing variables to default values
  set_fact:
    webportal_server_config: "{{ webportal_server_config | combine({item.key: item.value}, recursive=True) }}"
  when: webportal_server_config[item.key] is not defined
  loop: "{{ webportal_server_config_defaults | dict2items }}"
  no_log: True

# If the common/cluster config hasn't been yet saved to secrets backend, it is
# loaded as undefined now and we set it to empty dictionary.
#
# This is also where we want to save a snapshot of the old version to compare
# against later.
- name: Set common/cluster config to empty (if it hasn't yet been saved to secrets backend)
  set_fact:
    webportal_common_config: "{{ webportal_common_config | default({}) }}"
    webportal_common_config_last: "{{ webportal_common_config_last | default({}) }}"
    webportal_common_config_last_old: "{{ webportal_common_config_last | default({}) }}"

- name: Set portal common/cluster config missing variables to default values to the last config
  set_fact:
    webportal_common_config_last: "{{ webportal_common_config_last | combine({item.key: item.value}, recursive=True) }}"
  when: webportal_common_config[item.key] is not defined
  loop: "{{ webportal_common_config_defaults | dict2items }}"
  no_log: True

- name: Merge missing key/value pairs to the common/cluster config
  set_fact:
    webportal_common_config: "{{ webportal_common_config | combine(webportal_common_config_last, recursive=True) }}"

# If the 'mgkey' key was not defined at all in any of common/cluster configs,
# the key/value pair with auto-generated value was added by above tasks, but if
# the 'mgkey' key was defined and the value is empty, undefined or null we set
# it now.
- name: Set default value for MongoDB mgkey (if the value is not set)
  set_fact:
    webportal_common_config_last: >-
      {{
        webportal_common_config_last
        | combine({'mongo_db_mgkey': webportal_common_config_defaults.mongo_db_mgkey})
      }}
  when: >-
    webportal_common_config.mongo_db_mgkey is none
    or webportal_common_config.mongo_db_mgkey | length == 0

# Get MongoDB config
# NOTE: Server config preference:
# Some MongoDB configuration can be set at common (cluster) level or at
# server level (e.g. db user, db password). For these we prefer server
# config over common (cluster) config.

- name: Set MongoDB config keys with preference of server config over common config
  set_fact:
    mongodb_config_keys_server_preference:
      - skynet_db_host
      - skynet_db_port
      # Other MongoDB keys (e.g. skynet_db_user/pass/replicaset) can't be set
      # on server level (different for each Mongo server) because they are
      # shared through the whole cluster/replicaset.

- name: Set MongoDB config with preference of server config over common config
  set_fact:
    mongodb_config: "{{ mongodb_config | default({}) | combine({item: webportal_server_config[item] | default(webportal_common_config[item]) }) }}"
  no_log: True
  ignore_errors: True
  register: mongodb_config_server_preference_result
  loop: "{{ mongodb_config_keys_server_preference }}"

# Fail if not ok
- name: Fail if there are missing MongoDB config items
  fail:
    msg: |
      Portal configuration error for MongoDB:

      For MongoDB you must configure all of the following items
      in server or common config:

      Items with server config preference (over common config):
      {% for key in mongodb_config_keys_server_preference %}
      - {{ key }}
      {% endfor %}
  failed_when: mongodb_config_server_preference_result.failed | default(False)

# Fail if portal modules are not defined
- name: Fail if portal modules are not defined
  fail:
    msg: |
      Portal modules must be defined.
      Please define them in your hosts.ini file.
  failed_when:
    - portal_modules is not defined
    - webportal_server_config.portal_modules is not defined

# If portal_modules is defined in hosts.ini, make sure any secrets storage
# value is overwritten
- name: Update portal_modules
  set_fact:
    webportal_server_config: "{{ webportal_server_config | combine({'portal_modules': 'DEPRECATED - update value in hosts.ini'}) }}"
  when:
    - portal_modules is defined
    - webportal_server_config.portal_modules is defined

# Set portal module flags
- name: Set Portal Module Flags from hosts.ini
  include_tasks: tasks/portal-set-module-flags.yml
  vars:
    portal_modules_string: "{{ portal_modules | default(webportal_server_config.portal_modules) }}"

# Portal is anonymous if Accounts are off or if Accounts are on and
# accounts_limit_access is set to 'false' (case insensitive).
#
# The default for `accounts_limit_access` is authenticated as defined in the
# skynet-webportal repo
# https://github.com/SkynetLabs/skynet-webportal/blob/master/docker-compose.accounts.yml
- name: Set portal is anonymous flag
  set_fact:
    portal_is_anonymous: >-
      {{ not portal_accounts_on
      or webportal_common_config.accounts_limit_access
      | default("authenticated") | string | lower == 'false' }}
