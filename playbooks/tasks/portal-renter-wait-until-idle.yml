# Wait 5 minutes for any small uploads and downloads to finish. After 5 minutes,
# it is likely that it is a large upload in which case it is safe to take the
# server down as the large upload will continue on another server. Or it is a
# large download which can also be resumed on another server.

# Check if sia container is running.
- name: Check sia container is running
  community.docker.docker_container_info:
    name: sia
  register: sia_docker_container_result

# Get the ip address for the sia container
- name: Get sia service IP inside docker compose network
  command: docker inspect -f "{% raw %}{{ range.NetworkSettings.Networks }}{{ .IPAddress }}{{ end }}{% endraw %}" sia
  register: sia_ip_result

- block:
    - name: Set renter wait start time
      set_fact:
        renter_wait_start_time: "{{ (lookup('pipe', 'date +%s') | int) if renter_wait_start_time is not defined else renter_wait_start_time }}"

    - name: Get skyd /renter endpoint result
      command: docker run --rm --network="container:sia" "{{ curl_docker_image }}" --silent --show-error -A "Sia-Agent" "http://{{ sia_ip_result.stdout }}:9980/renter"
      register: renter_get_result

    - name: Calculate renter memory to check for active registry access, downloads and uploads
      vars:
        # get renter output, convert to json, and get the memorystatus field
        output: "{{ renter_get_result.stdout | from_json }}"
        memorystatus: "{{ output.memorystatus }}"
        # get requested memory amount for registry, download and uploads
        registry_requested: "{{ memorystatus.registry.requested }}"
        userdownload_requested: "{{ memorystatus.userdownload.requested }}"
        userupload_requested: "{{ memorystatus.userupload.requested }}"
        # check if any memory is being used for registry, download and uploads
        renter_busy_registry: "{{ registry_requested | int > 0 }}"
        renter_busy_downloads: "{{ userdownload_requested | int > 0 }}"
        renter_busy_uploads: "{{ userupload_requested | int > 0 }}"
      set_fact:
        # register renter busy status
        renter_busy: "{{ renter_busy_registry or renter_busy_downloads or renter_busy_uploads }}"
      when:
        - renter_get_result.rc == 0 and renter_get_result.stderr == ""

    - name: "Check if renter is idle"
      fail:
        msg: Renter still busy with registry, downloads or uploads.
      when:
        - renter_get_result.rc == 0 and renter_get_result.stderr == ""
        - renter_busy

    - name: renter_wait_start_time
      ansible.builtin.debug:
        var: renter_wait_start_time

    - name: renter_get_result.rc
      ansible.builtin.debug:
        var: renter_get_result.rc

    - name: renter_get_result.stderr
      ansible.builtin.debug:
        var: renter_get_result.stderr

    - name: renter_idle
      ansible.builtin.debug:
        var: renter_idle

    - name: renter_busy
      ansible.builtin.debug:
        var: renter_busy

  rescue:
    - name: "Retry renter check"
      include_tasks: tasks/portal-renter-wait-until-idle.yml
      # when:
      #   - "{{ (lookup('pipe', 'date +%s') | int) - renter_wait_start_time < renter_busy_check_wait_secs }}"

  # Do not wait if sia container is not running or is restarting
  when:
    - sia_docker_container_result.exists
    - sia_docker_container_result.container is defined
    - sia_docker_container_result.container.State.Running
    - not sia_docker_container_result.container.State.Restarting
    - sia_ip_result.rc == 0
