---
# Get inputs for secrets storage migration

- name: Initialize list variables
  set_fact:
    cluster_ids: []
    hosts_to_migrate: []

- name: Get all cluster ids
  vars:
    pcid: "{{ hostvars[item]['portal_cluster_id'] | default('') }}"
  set_fact:
    cluster_ids: "{{ cluster_ids + ([pcid] if (pcid not in cluster_ids) else []) }}"
  loop: "{{ groups['webportals'] }}"

- name: Sort cluster ids list
  set_fact:
    cluster_ids: "{{ cluster_ids | sort }}"

- name: Fail if we haven't found at least one correctly defined cluster
  ansible.builtin.fail:
    msg: |
      At least one correctly defined cluster has not been found.
      We search for clusters defined by 'portal_cluster_id' in 'hosts.ini'
  when: cluster_ids | length - (1 if '' in cluster_ids else 0) < 1

- name: Get cluster IDs to migrate (if there is just one cluster defined)
  set_fact:
    cluster_ids_to_migrate: "{{ cluster_ids }}"
  when: cluster_ids | length == 1

- block:
    - name: Set all option
      set_fact:
        all_option: "{{ 'ALL' if 'ALL' not in cluster_ids else 'MIGRATE-ALL' }}"

    - name: Prompt which Skynet cluster to migrate (if there are more)
      ansible.builtin.pause:
        prompt: |-
          We have found the following Skynet clusters and their hosts:

          {% for cid in cluster_ids %}
          - Cluster ID: {{ cid if cid != '' else '<cluster not defined>'}}
            Hosts:
          {% for h in groups['webportals'] | sort %}
          {% if hostvars[h]['portal_cluster_id'] | default('') == cid %}
              - {{ h }}
          {% endif %}
          {% endfor %}
          {% endfor %}

          Which cluster you want to migrate?
          Enter either cluster id from the list above
          or type '{{ all_option }}' to migrate all of your data
      when: "'' in cluster_ids or cluster_ids | length != 1"
      register: cluster_prompt_result

    - name: Get cluster ID answer
      set_fact:
        cid_answer: "{{ cluster_prompt_result.user_input }}"

    - name: Fail when getting unsupported answer
      ansible.builtin.fail:
        msg: |
          Your answer:
              '{{ cid_answer }}'
          is not supported.
          You need to select one of defined cluster IDs (see the list above).
      when: cid_answer == '' or cid_answer not in cluster_ids + [all_option]

    - name: Set cluster IDs to migrate
      set_fact:
        cluster_ids_to_migrate: >-
          {{
            cluster_ids | difference('')
            if cid_answer == all_option
            else [cid_answer]
          }}
  when: "'' in cluster_ids or cluster_ids | length != 1"

- name: Define secrets storage options
  set_fact:
    secrets_storages:
      h: "hashicorp-vault"
      l: "lastpass"
      p: "plaintext"

- name: Select which secrets storage you want to migrate from
  ansible.builtin.pause:
    prompt: |-
      Which secret storage you want to migrate FROM:
      - h: from HashiCorp Vault
      - l: from LastPass
      - p: from plaintext
      Migrate FROM: Enter one-letter option
  register: from_prompt_result
  failed_when: from_prompt_result.user_input not in secrets_storages.keys()

- name: Select which secrets storage you want to migrate to
  ansible.builtin.pause:
    prompt: |-
      Which secret storage you want to migrate TO:
      - h: to HashiCorp Vault
      - l: to LastPass
      - p: to plaintext
      Migrate TO: Enter one-letter option
  register: to_prompt_result
  failed_when: to_prompt_result.user_input not in secrets_storages.keys()

- name: Set secrets storage from and to
  set_fact:
    secrets_storage_from: "{{ secrets_storages[from_prompt_result.user_input] }}"
    secrets_storage_to: "{{ secrets_storages[to_prompt_result.user_input] }}"

- name: Set secrets storage var prefixes
  set_fact:
    secrets_storage_from_var_prefix: "{{ secrets_storage_from | replace('-', '_') }}"
    secrets_storage_to_var_prefix: "{{ secrets_storage_to | replace('-', '_') }}"

- name: Fail if secrets storage source/from equals destination/to
  ansible.builtin.fail:
    msg: "You can't migrate from/to the same secrets storage"
  when: secrets_storage_from == secrets_storage_to

- name: Set hosts to migrate
  set_fact:
    hosts_to_migrate: "{{ hosts_to_migrate + [item] }}"
  when: hostvars[item]['portal_cluster_id'] | default('') in cluster_ids_to_migrate
  loop: "{{ groups['webportals'] }}"
