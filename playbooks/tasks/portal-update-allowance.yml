# Check on the webportal's allowance and update if necessary

# This task pulls curl docker image from Docker Hub. We use curl docker image
# instead of locally installed curl so that we can run curl command inside sia
# docker network defined later as docker run ... --network="container:sia" ....
- name: Pull curl docker image
  community.docker.docker_image:
    name: "{{ curl_docker_image }}"
    source: pull

# Some servers have blocked outgoing traffic to local networks so curl sia from
# host will refuse connection, we have to curl inside docker compose network.

# Get the ip address for the sia container
- name: Get sia service IP inside docker compose network
  command: docker inspect -f "{% raw %}{{ range.NetworkSettings.Networks }}{{ .IPAddress }}{{ end }}{% endraw %}" sia
  register: sia_ip_result

# Get the renter's information
- name: Grab the Renter's information
  command: docker run --rm --network="container:sia" "{{ curl_docker_image }}" -A "Sia-Agent" "http://{{ sia_ip_result.stdout }}:9980/renter"
  register: renter_get_result

- name: Parse the Renter's information as json
  set_fact:
    # Parse the RenterGET json object from stdout response
    renter_json: "{{ renter_get_result.stdout | from_json }}"
    # Grab the allowance funds
    allowance_funds: "{{ renter_json.settings.allowance.funds }}"
    # Grab the financial metrics and the maintenance spending
    financial_metrics: "{{ renter_json.financialmetrics }}"

# This tasks calculates the unspent unallocated based on the calculation in the
# ContractorSpending SpendingBreakdown method from skyd
# https://gitlab.com/SkynetLabs/skyd/-/blob/master/skymodules/renter.go
- name: Calculate Unspent Unallocated and Grab Allowance Funds
  # Determine variables needed for this task
  vars:
    # This is the lower threshold, types.NewCurrency64(10e3)
    unspent_unallocated_lower_threshold: 10000
    # Calculate what 20% of the allowance funds are
    twenty_percent_allowance: "{{ allowance_funds|int / 5 }}"
    maintenance_spending: "{{ financial_metrics.maintenancespending }}"
    # Calculate the total spent
    total_spent: >-
      {{ financial_metrics.contractfees|int +
      financial_metrics.uploadspending|int +
      financial_metrics.downloadspending|int +
      financial_metrics.storagespending|int +
      financial_metrics.fundaccountspending|int +
      maintenance_spending.accountbalancecost|int +
      maintenance_spending.fundaccountcost|int +
      maintenance_spending.updatepricetablecost|int }}
    # Calculate the unspent allocated
    unspent_allocated: "{{ financial_metrics.totalallocated|int - total_spent|int }}"
    # Calculate the unspent unallocated
    unspent_unallocated: "{{ financial_metrics.unspent|int - unspent_allocated|int }}"
  # Define facts needed in the following tasks
  set_fact:
    # See if over 80% of the allowance has been allocated
    eighty_percent_used_update: "{{ twenty_percent_allowance|int > unspent_unallocated|int }}"
    # See if unspent unallocated is below the lower threshold
    below_threshold_update: "{{ unspent_unallocated|int < unspent_unallocated_lower_threshold|int }}"
    # Define the amount the allowance should be updated to
    update_amount: "{{ twenty_percent_allowance|int + allowance_funds|int }}"

# If either of the allowance update checks are valid, increase the allowance.
- name: Update Allowance if needed
  # All units are in hastings so H suffix must be used
  ansible.builtin.command: "docker exec sia siac renter setallowance --amount {{ update_amount }}H"
  when: eighty_percent_used_update|bool or below_threshold_update|bool
