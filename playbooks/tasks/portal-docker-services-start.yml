---
# Start portal docker services

# Include getting wanted docker-compose files
- name: Include getting wanted docker-compose files
  include_tasks: tasks/portal-docker-compose-files-get-wanted.yml

# Create timestamped log filename prefix
- name: Include getting log filename prefix
  include_tasks: tasks/portal-get-log-filename-prefix.yml

# Include getting Ansible repo branch and commit
- name: Include getting Ansible repo branch and commit
  include_tasks: tasks/ansible-repo-version-get.yml

# Include logging Ansible version
- name: Include logging Ansible version
  include_tasks: tasks/ansible-repo-log-version.yml

# Include setting portal versions (portal, skyd, accounts)
- name: Include setting portal versions (portal, skyd, accounts)
  include_tasks: tasks/portal-versions-set.yml
  when: set_portal_versions

# Include getting portal, Sia, accounts versions
- name: Include getting portal, Sia, accounts versions
  include_tasks: tasks/portal-versions-get.yml

# Include logging portal, Sia, accounts versions
- name: Include logging portal, Sia, accounts versions
  include_tasks: tasks/portal-logs-log-versions.yml

# Log portal config files (docker-compose.*, .env)
- name: Log portal config files (docker-compose.*, .env)
  ansible.builtin.copy:
    src: "{{ webportal_dir }}/{{ item }}"
    dest: "{{ logs_dir }}/{{ log_filename_prefix }}.{{ item }}"
    remote_src: True
    mode: preserve
  loop: "{{ webportal_docker_compose_files_wanted + webportal_other_config_files }}"

# Log status as 'starting'
- name: Log status as 'starting'
  file:
    path: "{{ logs_dir }}/{{ log_filename_prefix }}.status.starting"
    state: touch

# Print timestamp
- name: Print timestamp (starting docker services)
  debug:
    msg: "{{ inventory_hostname + ' docker services start: ' + lookup('pipe','date +%Y-%m-%dT%H:%M:%S') + ' UTC' }}"

# Prepare test user and its Skynet API key (if needed) otherwise health-check
# container keeps restarting.

- name: Get API key is defined flag
  ansible.builtin.set_fact:
    api_key_defined: "{{ webportal_server_config.accounts_test_user_api_key | default('not-defined') != 'not-defined' }}"

- block:
    - debug:
        msg: |
          api key:
          {{ api_key | default('idk') }}

          api_key is none:
          {{ api_key is none }}
          
          api_key == '':
          {{ api_key | default('idk') == '' }}
      vars:
        api_key: "{{ webportal_server_config.accounts_test_user_api_key | default('') }}"

    - pause:
        prompt: ok?

    - name: Start accounts and nginx docker services (so we can prepare test user)
      community.docker.docker_compose:
        project_src: "{{ webportal_dir }}"
        files: "{{ webportal_docker_compose_files_wanted }}"
        services:
          - "accounts"
          - "nginx"
        build: "{{ docker_compose_build }}"
        remove_orphans: True
        nocache: True
        pull: True
        state: present
      become: True
      become_user: "user"

    # Prepare test user and API key when portal is not anonymous and Skynet API
    # key was not yet set.
    - name: Include preparing Accounts test user
      include_tasks: tasks/portal-accounts-test-user-prepare.yml
  when:
    - portal_action in ['portal-setup-and-deploy', 'portal-setup']
    - portal_accounts_on
    - not portal_is_anonymous
    - mongo_replicaset_initialized | default(False) or not api_key_defined

# Start the docker services (on deploy also build images)
- name: Start the docker services (on deploy also build images)
  community.docker.docker_compose:
    project_src: "{{ webportal_dir }}"
    files: "{{ webportal_docker_compose_files_wanted }}"
    build: "{{ docker_compose_build }}"
    remove_orphans: True
    nocache: True
    pull: True
    state: present
    # TODO: Build in parallel, when Ansible support is added
  become: True
  become_user: "user"
  register: docker_compose_start_result

# Set list of started docker compose services
- name: Set list of started docker compose services
  set_fact:
    docker_compose_services: "{{ docker_compose_start_result.services.keys() | list }}"

# Log docker compose services
- name: Log docker compose services
  debug:
    msg: |
      Docker compose started following services:

      "{{ docker_compose_services }}"

- name: Include prunning old docker data
  include_tasks: tasks/portal-docker-prune-old-data.yml

# Wait until Sia finished full setup
- name: Wait until Sia finished full setup
  command: docker logs sia
  register: docker_logs_sia
  until: docker_logs_sia.stdout.find("Finished full setup in") != -1
  delay: 1
  retries: "{{ sia_full_setup_timeout_secs }}"

# Check that the Sia Blockchain is synced
- name: Check Sia blockchain sync status
  command: docker exec sia siac consensus
  register: siac_consensus_result
  until: "'Synced: Yes' in siac_consensus_result.stdout"
  delay: 30
  retries: 20
  failed_when: False

- name: Check if the Sia blockchain is synced
  fail:
    msg: |
      Sia blockchain is not yet synced:

      {{ siac_consensus_result.stdout }}

      Wait for Sia blockchain synced and rerun the playbook.
      To check sync status, execute (on the server):

        docker exec sia siac consensus
  when: "'Synced: Yes' not in siac_consensus_result.stdout"

# Include waiting for sia daemon/ready
- name: Include waiting for sia daemon/ready
  include_tasks: tasks/portal-wait-for-sia-daemon-ready.yml

# Confirm all Docker Services Started Up
- name: Include checking docker containers are running, not restarting
  include_tasks: tasks/portal-docker-services-check-running.yml
  vars:
    docker_containers_check_list: "{{ docker_compose_services }}"
    docker_containers_check_timeout_secs: "{{ fifteen_minutes_in_secs }}"

# Update log status to 'started'
- name: Update log status to 'started'
  include_tasks: tasks/portal-logs-update-status.yml
  vars:
    tag_from: "starting"
    tag_to: "started"

# Include running any commands post startup
- name: Include running any commands post startup
  include_tasks: tasks/portal-execute-commands.yml
