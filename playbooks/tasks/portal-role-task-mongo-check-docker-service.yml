---
# Check MongoDB docker service runs correctly
# TODO: This ansible playbook task, should be moved to portal role

# Check mongo container is running correctly
# Outcome:
# - mongo_service_ok: boolean flag whether mongo service runs as expected

- name: Set MongoDB start timestamp
  set_fact:
    mongodb_start_timestamp: "{{ ansible_date_time.iso8601_micro[:-1] }}"

- name: Start docker mongo service
  ansible.builtin.command: "chdir={{ webportal_dir }} ./dc up --remove-orphans --detach mongo"
  become: True
  become_user: "{{ webportal_user }}"
  register: docker_mongo_result
  ignore_errors: True

- name: Set mongo service ok flag
  set_fact:
    mongo_service_ok: "{{ docker_mongo_result.rc == 0 }}"

- name: Log docker compose result on error
  debug:
    msg: |
      Starting mongo servise by docker compose failed:

      {{ docker_mongo_result | to_nice_json }}
  when: not mongo_service_ok

- name: Wait for mongo container initialization before checking status
  ansible.builtin.shell: 'docker logs mongo | grep ''"Waiting for connections"'''
  vars:
    fmt: "%Y-%m-%dT%H:%M:%S.%f"
  register: mongo_ready_result
  until: >-
    mongo_ready_result.stdout_lines | length > 0 and
    (mongo_ready_result.stdout_lines[-1] | from_json).t['$date'][:23] | to_datetime(fmt) > mongodb_start_timestamp | to_datetime(fmt)
  delay: 1
  retries: 20
  when: mongo_service_ok and docker_mongo_result.changed | default(False)

- name: Check mongo container is running
  community.docker.docker_container_info:
    name: mongo
  register: mongo_container_result
  when: mongo_service_ok

- name: Update mongo service ok flag
  set_fact:
    mongo_service_ok: >-
      {{ (mongo_container_result.exists | default(False) and
      mongo_container_result.container.State.Running and
      not mongo_container_result.container.State.Restarting) }}
  # Update only if not already failing
  when: mongo_service_ok

- name: Log mongo container info when not running properly
  debug:
    msg: |
      Mongo container info:

      {{ mongo_container_result | to_nice_json }}
  # Log only when checking container was performed (didn't fail previously)
  when: not (mongo_container_result.skipped | default(False)) and not mongo_service_ok

- name: Include checking mongo container admin login
  include_tasks: tasks/portal-role-task-mongo-shell-eval.yml
  vars:
    mongodb_shell:
      eval: "db.serverStatus()"
      until: '''"ok" : 1'' in mongo_shell_result.transformed_output'
      retries: 20
      ignore_errors: True
  when: mongo_service_ok
  register: mongo_checking_admin_result

- name: Update mongo service ok flag
  set_fact:
    mongo_service_ok: "{{ not (mongo_shell_result.failed | default(False)) }}"
  when: mongo_service_ok

- name: Log mongo server status when on ok
  debug:
    msg: |
      MongoDB node server status:

      {{ mongo_shell_result | to_nice_json }}
  # Log only when checking replicaset status was performed (didn't fail previously)
  when: not (mongo_checking_admin_result.skipped | default(False)) and not mongo_service_ok

- name: Include checking replicaset status of the MongoDB node
  include_tasks: tasks/portal-role-task-mongo-shell-eval.yml
  vars:
    mongodb_shell:
      eval: |
        rss = rs.status()
        if (rss.ok == 1) {
          rss.members.forEach(m => {
            if (m.name == '{{ ansible_host }}:{{ custom_mongo_port | default(default_mongo_port | string) }}')
            {
              print(m.stateStr)
            }
          })
        } else {
          rss
        }
      until: mongo_shell_result.transformed_output in ['PRIMARY', 'SECONDARY']
      retries: 120
      ignore_errors: True
  when: mongo_service_ok
  register: checking_replicaset_result

- name: Update mongo service ok flag
  set_fact:
    mongo_service_ok: "{{ not (mongo_shell_result.failed | default(False)) }}"
  when: mongo_service_ok

- name: Log mongo replicaset status when on ok
  debug:
    msg: |
      MongoDB node resplicaset status:

      {{ mongo_shell_result | to_nice_json }}
  # Log only when checking replicaset status was performed (didn't fail previously)
  when: not (checking_replicaset_result.skipped | default(False)) and not mongo_service_ok
