---
# Take portal out of load balancer by stopping health check

# Check if the health check container is running.
- name: Check health check container is running
  community.docker.docker_container_info:
    name: health-check
  register: health_check_docker_container_result

# Marker the health check as disabled via the cli command
- name: Stop portal health check to take portal out of load balancer
  # NOTE: portal_action is defined by the playbook, i.e. for deploys,
  # portal_action='portal-deploy'
  command: 'docker exec health-check cli disable "{{ out_of_lb_message | default(portal_action) }}"'
  register: docker_health_check_disable_result
  # Only fail the task if there is an error reported to stderr, unless it
  # is that the container is restarting, since that means the health check isn't
  # active already.
  failed_when:
    - docker_health_check_disable_result.stderr != ''
    - docker_health_check_disable_result.stderr.find("restarting") == -1
  # Only execute the CLI command if the container is up and running. Otherwise,
  # if it is not up and running, it is practically disabled.
  when:
    - health_check_docker_container_result.exists
    - health_check_docker_container_result.container is defined
    - health_check_docker_container_result.container.State.Running

# Wait 5 minutes for any small uploads and downloads to finish. After 5 minutes,
# it is likely that it is a large upload in which case it is safe to take the
# server down as the large upload will continue on another server. Or it is a
# large download which can also be resumed on another server.

# Check if sia container is running.
- name: Check sia container is running
  community.docker.docker_container_info:
    name: sia
  register: sia_docker_container_result

# Get the ip address for the sia container
- name: Get sia service IP inside docker compose network
  command: docker inspect -f "{% raw %}{{ range.NetworkSettings.Networks }}{{ .IPAddress }}{{ end }}{% endraw %}" sia
  register: sia_ip_result

- block:
    - name: Get skyd /renter endpoint result
      command: docker run --rm --network="container:sia" "{{ curl_docker_image }}" -A "Sia-Agent" "http://{{ sia_ip_result.stdout }}:9980/renter"
      register: renter_get_result

    - name: Calculate renter memory to check for active registry access, downloads and uploads
      vars:
        # get renter output, convert to json, and get the memorystatus field
        output: "{{ renter_get_result.stdout | from_json }}"
        memorystatus: "{{ output.memorystatus }}"
        # get requested memory amount for registry, download and uploads
        registry_requested: "{{ memorystatus.registry.requested | int }}"
        userdownload_requested: "{{ memorystatus.userdownload.requested | int }}"
        userupload_requested: "{{ memorystatus.userupload.requested | int }}"
        # check if any memory is being used for registry, download and uploads
        renter_busy_registry: "{{ registry_requested > 0 }}"
        renter_busy_downloads: "{{ userdownload_requested > 0 }}"
        renter_busy_uploads: "{{ userupload_requested > 0 }}"
      set_fact:
        # register renter busy status
        renter_busy: "{{ renter_busy_registry or renter_busy_downloads or renter_busy_uploads }}"
        renter_idle: "{{ not renter_busy }}"
      when:
        - renter_get_result.rc == 0 and renter_get_result.stderr == ""

    - name: "Check if renter is idle"
      fail:
        msg: Renter still busy with registry, downloads or uploads.
      when:
        - renter_get_result.rc == 0 and renter_get_result.stderr == ""
        - renter_busy

  retries: "{{ (renter_busy_check_wait_secs / 5) | int }}"
  delay: 5

  # Do not wait if sia container is not running or is restarting
  when:
    - sia_docker_container_result.exists
    - sia_docker_container_result.container is defined
    - sia_docker_container_result.container.State.Running
    - not sia_docker_container_result.container.State.Restarting
    - sia_ip_result.rc == 0
