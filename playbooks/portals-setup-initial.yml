# This playbook:
# - Creates webportal user (user should have uid:gid=1000:1000 for elasticsearch docker config)
# - Sets up basic security

# Workflow:
# - if we have root user (initial_root_like_user is not defined):
#     - login as root user
#         - create webportal user
#         - setup basic security (that's all)
# - if we do not have root, but initial_root_like_user
#   (e.g. debian with uid:gid=1000:1000) with password-less sudo rights:
#     - login as initial_root_like_user user
#         - create temp user with sudo rights
#     - login as temp user
#         - remove debian user
#         - create webportal user (with uid:gid=1000:1000)
#         - setup basic security

- name: Check '--limit' is used, create LastPass user password
  hosts: webportals
  remote_user: "nobody"
  gather_facts: False
  serial: 1
  any_errors_fatal: True
  vars:
    max_hosts: "{{ groups['webportals'] | length - 1 }}"
  vars_files:
    - "{{ common_vars_file }}"
    - "{{ custom_vars_file  }}"
  tasks:
    - name: Fail if you are targeting all dev and prod webportals
      include_tasks: tasks/host-limit-check.yml

    - name: Include creating OS user credentials in secrets storage (if missing)
      include_tasks: tasks/secrets-storage-common-save-user-credentials.yml

# When we have root access we just run this play
- name: Setup basic security by root
  hosts: webportals
  remote_user: "root"
  gather_facts: False
  serial: 1 # Limit concurrency
  any_errors_fatal: True # Stop on first error, do not execute on the next host
  vars_files:
    - "{{ common_vars_file }}"
    - "{{ custom_vars_file  }}"
  tasks:
    - name: Skip if initial root like user is defined
      meta: end_host
      when: initial_root_like_user is defined

    - name: Include checking hosts.ini compatibility with playbooks v2
      include_tasks: tasks/secrets-storage-check-hosts-ini-update.yml

    - name: Include loading user credentials from secrets storage
      include_tasks: tasks/secrets-storage-common-load-user-credentials.yml

    - name: Install python3 for Ansible
      ansible.builtin.raw: test -e /usr/bin/python3 || (apt -qqy update && apt install -qqy python3)
      args:
        executable: /bin/bash

    # Check host OS version
    - name: Gather ansible facts on demand
      ansible.builtin.setup:

    - name: Include checking server OS compatibility
      include_tasks: tasks/check-server-os-compatibility.yml

    # Basic security
    - name: Include basic security setup
      include_tasks: tasks/basic-security-setup.yml
      when: setup_basic_security

# When we have initial root like user
- name: Create temp user by initial root like user
  hosts: webportals
  remote_user: "{{ initial_root_like_user | default('') }}"
  gather_facts: False
  serial: 1 # Limit concurrency
  any_errors_fatal: True # Stop on first error, do not execute on the next host
  vars_files:
    - "{{ common_vars_file }}"
    - "{{ custom_vars_file  }}"
  tasks:
    - name: Skip if initial root like user is not defined
      meta: end_host
      when: initial_root_like_user is not defined

    - name: Include checking hosts.ini compatibility with playbooks v2
      include_tasks: tasks/secrets-storage-check-hosts-ini-update.yml

    - name: Include loading user credentials from secrets storage
      include_tasks: tasks/secrets-storage-common-load-user-credentials.yml

    - name: Check SSH access (initial root like user might be already disabled)
      block:
        - name: Check SSH access
          wait_for_connection:
            timeout: "{{ access_check_timeout_secs }}"
          changed_when: False
          register: ssh_access_result
      rescue:
        # 'meta: end_host' couldn't be in this 'rescue:' because it caused
        # ansible host to stop completely, it didn't continued to the next
        # play. So the 'meta: end_host' was added to the block with 'when'.
        - name: Ignore error and handle failure in following task
          meta: noop

    - name: Skip to next play if initial root like user was disabled
      block:
        - name: Log no SSH access
          debug:
            msg: |
              User {{ initial_root_like_user }}
              could not establish SSH connection
              within {{ access_check_timeout_secs }} seconds timeout

              Maybe
                - {{ initial_root_like_user }} user was already disabled (this is expected)
                - server is down
                - fail2ban limits SSH connections

              Skipping this play, continue with the next play...

        - name: End the play
          meta: end_host
      when: ssh_access_result.failed

    - name: Install python3 for Ansible
      ansible.builtin.raw: test -e /usr/bin/python3 || (apt -qqy update && apt install -qqy python3)
      args:
        executable: /bin/bash

    # Check host OS version

    - name: Gather ansible facts on demand
      ansible.builtin.setup:

    - name: Include checking server OS compatibility
      include_tasks: tasks/check-server-os-compatibility.yml

    # Backup and update initial_users

    - name: Backup initial users
      set_fact:
        initial_users_before_user_dance: "{{ initial_users }}"

    - name: Update initial users with temp user
      set_fact:
        initial_users: "{{ [item | combine({'username': webportal_temp_user, 'gid': None}, recursive=True)] }}"
      when: item.username == webportal_user
      loop: "{{ initial_users }}"

    # Setup basic security
    - name: Include basic security setup
      include_tasks: tasks/basic-security-setup.yml
      args:
        apply:
          become: True
      when: setup_basic_security

# When we have initial root like user
- name: Create webportal user by temp user
  hosts: webportals
  remote_user: "{{ webportal_temp_user | default('') }}"
  gather_facts: False
  serial: 1 # Limit concurrency
  any_errors_fatal: True # Stop on first error, do not execute on the next host
  vars_files:
    - "{{ common_vars_file }}"
    - "{{ custom_vars_file  }}"
  tasks:
    - name: Skip if initial root like user is not defined
      meta: end_host
      when: initial_root_like_user is not defined

    - name: Include loading user credentials from secrets storage
      include_tasks: tasks/secrets-storage-common-load-user-credentials.yml

    - name: Remove initial root like user
      ansible.builtin.user:
        name: "{{ initial_root_like_user }}"
        state: absent
        remove: yes
        force: True
      become: True

    - name: Restore initial users (if they were updated)
      set_fact:
        initial_users: "{{ initial_users_before_user_dance | default(initial_users) }}"

    - name: Gather ansible facts on demand
      ansible.builtin.setup:

    # Setup basic security
    - name: Include basic security setup
      include_tasks: tasks/basic-security-setup.yml
      args:
        apply:
          become: True
      when: setup_basic_security
