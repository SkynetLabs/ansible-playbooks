# Migrate data between secrets storages (plaintext/HashiCorp Vault/LastPass)

- name: "Get user input: Skynet cluster to migrate, source and destination secrets storages"
  hosts: localhost
  gather_facts: False
  any_errors_fatal: True
  tasks:
    - name: Include getting migration inputs from the user
      include_tasks: tasks/secrets-storage-migration-get-inputs.yml

    - name: Show confirmation before migration
      ansible.builtin.pause:
        prompt: |-
          We will migrate secrets records for the following hosts:
          {% for h in hosts_to_migrate %}
            - {{ h }}
          {% endfor %}

          We will migrate cluster with the following cluster IDs:
          {% for c in cluster_ids_to_migrate %}
            - {{ c }}
          {% endfor %}

          From: {{ secrets_storage_from }}
          To:   {{ secrets_storage_to }}

          Press Enter to continue,
          'n' to abort
      register: confirmation_prompt_result
      failed_when: "'n' in (confirmation_prompt_result.user_input | lower)"

# - name: Check if destination server credential records exist and do not differ from the source
#   hosts: webportals
#   gather_facts: False
#   any_errors_fatal: True
#   vars_files:
#     - "{{ common_vars_file }}"
#     - "{{ custom_vars_file  }}"
#   tasks:
#     - name: Skip hosts we don't want to migrate
#       meta: end_host
#       when: inventory_hostname not in hostvars.localhost.hosts_to_migrate

#     # Handle destination

#     - name: Set secrets storage to destination
#       set_fact:
#         secrets_storage: "{{ hostvars.localhost.secrets_storage_to }}"

#     - name: Include checking if server credentials record exist
#       include_tasks: tasks/secrets-storage-common-check-record-exists.yml
#       vars:
#         secret_path: "{{ lookup('vars', hostvars.localhost.secrets_storage_to_var_prefix + '_portal_credentials_server') }}"

#     - name: Skip hosts that don't have existing credentials record in destination
#       meta: end_host
#       when: not secrets_storage_record_exists

#     - name: Include loading server credentials from destination
#       include_tasks: tasks/secrets-storage-common-load-user-credentials.yml

#     - name: Get destination password
#       set_fact:
#         pass_to: "{{ ansible_become_pass }}"

#     # Handle source

#     - name: Set secrets storage to source
#       set_fact:
#         secrets_storage: "{{ hostvars.localhost.secrets_storage_from }}"

#     - name: Include loading server credentials from source
#       include_tasks: tasks/secrets-storage-common-load-user-credentials.yml
    
#     - name: Get source password
#       set_fact:
#         pass_from: "{{ ansible_become_pass }}"

#     # Handle if source/destination passwords are different

#     - name: Check source and destination passwords
#       set_fact:
#         pass_differs: "{{ pass_from != pass_to }}"

#     - name: Skip hosts that have same passwords on source and destination
#       meta: end_host
#       when: not pass_differs

#     - name: Fail if some hosts have unsynced passwords between source and destination
#       ansible.builtin.fail:
#         msg: |
#           The following hosts:
#           {% for h in ansible_play_batch %}
#             - {{ h }}
#           {% endfor %}
#           have different passwords between
#           source secrets storage: {{ hostvars.localhost.secrets_storage_from }}
#           and destination secrets storage: {{ hostvars.localhost.secrets_storage_to }}

#           Ansible can't determine which password is obsolete and which is current
#           for the above hosts.

#           You should sync the passwords for the above hosts manually
#           and then you can rerun the migration playbook.
#       run_once: True

# - name: Check if destination server config records exist and do not differ from the source
#   hosts: webportals
#   gather_facts: False
#   any_errors_fatal: True
#   vars_files:
#     - "{{ common_vars_file }}"
#     - "{{ custom_vars_file  }}"
#   tasks:
#     - name: Skip hosts we don't want to migrate
#       meta: end_host
#       when: inventory_hostname not in hostvars.localhost.hosts_to_migrate

#     # Handle destination

#     - name: Set secrets storage to destination
#       set_fact:
#         secrets_storage: "{{ hostvars.localhost.secrets_storage_to }}"

#     - name: Include checking if server config record exist
#       include_tasks: tasks/secrets-storage-common-check-record-exists.yml
#       vars:
#         secret_path: "{{ lookup('vars', hostvars.localhost.secrets_storage_to_var_prefix + '_portal_config_server') }}"

#     - name: Skip hosts that don't have existing config record in destination
#       meta: end_host
#       when: not secrets_storage_record_exists

#     - name: Include loading server config from destination
#       include_tasks: "tasks/secrets-storage-common-load-yaml-or-json.yml"
#       loop:
#         # Set `secret_path` according to `{{secret_storage}}_portal_config_server`
#         # variable
#         - secret_path: "{{ lookup('vars', hostvars.localhost.secrets_storage_to_var_prefix + '_portal_config_server') }}"
#           var_name: webportal_server_config_to

#     # Handle source

#     - name: Set secrets storage to source
#       set_fact:
#         secrets_storage: "{{ hostvars.localhost.secrets_storage_from }}"

#     - name: Include loading server config from source
#       include_tasks: "tasks/secrets-storage-common-load-yaml-or-json.yml"
#       loop:
#         # Set `secret_path` according to `{{secret_storage}}_portal_config_server`
#         # variable
#         - secret_path: "{{ lookup('vars', hostvars.localhost.secrets_storage_from_var_prefix + '_portal_config_server') }}"
#           var_name: webportal_server_config_from

#     # Handle if source/destination configs are different

#     - name: Check source and destination configs
#       vars:
#         original_dict: "{{ webportal_server_config_from }}"
#         new_dict: "{{ webportal_server_config_to }}"
#       include_tasks: tasks/dictionary-diff.yml

#     - name: Skip hosts that have same configs on source and destination
#       meta: end_host
#       when: not different_dict

#     - debug:
#         msg: |
#           Host: {{ inventory_hostname }}

#           has different configs between
#           source secrets storage: {{ hostvars.localhost.secrets_storage_from }}
#           and destination secrets storage: {{ hostvars.localhost.secrets_storage_to }}

#           {{ diff_string }}

#     - name: Fail if some hosts have unsynced configs between source and destination
#       ansible.builtin.fail:
#         msg: |
#           The following hosts:
#           {% for h in ansible_play_batch %}
#             - {{ h }}
#           {% endfor %}
#           have different configs between
#           source secrets storage: {{ hostvars.localhost.secrets_storage_from }}
#           and destination secrets storage: {{ hostvars.localhost.secrets_storage_to }}

#           For details see diff logs above.

#           Ansible can't determine which config is obsolete and which is current
#           for the above hosts.

#           You should sync the configs for the above hosts manually
#           and then you can rerun the migration playbook.
#       run_once: True

# - name: Migrate server credentials and configs to destination
#   hosts: webportals
#   gather_facts: False
#   any_errors_fatal: True
#   tasks:
#     - name: Skip hosts we don't want to migrate
#       meta: end_host
#       when: inventory_hostname not in hostvars.localhost.hosts_to_migrate

#     # Read from source

#     - name: Set secrets storage to source
#       set_fact:
#         secrets_storage: "{{ hostvars.localhost.secrets_storage_from }}"

#     - name: Include loading server credentials from source
#       include_tasks: tasks/secrets-storage-common-load-user-credentials.yml
    
#     - name: Get source password
#       set_fact:
#         pass_from: "{{ ansible_become_pass }}"

#     - name: Include loading server config from source
#       include_tasks: "tasks/secrets-storage-common-load-yaml-or-json.yml"
#       loop:
#         # Set `secret_path` according to `{{secret_storage}}_portal_config_server`
#         # variable
#         - secret_path: "{{ lookup('vars', hostvars.localhost.secrets_storage_from_var_prefix + '_portal_config_server') }}"
#           var_name: webportal_server_config

#     # Write to destination

#     - name: Set secrets storage to destination and set password to source
#       set_fact:
#         secrets_storage: "{{ hostvars.localhost.secrets_storage_to }}"
#         ansible_become_pass: "{{ pass_from }}"

#     - name: Include creating OS user credentials in secrets storage (if missing)
#       include_tasks: tasks/secrets-storage-common-save-user-credentials.yml

#     - name: Include saving server config data to destination
#       include_tasks: "tasks/secrets-storage-common-save-data-to-yaml-or-json.yml"
#       vars:
#         secret_path: "{{ lookup('vars', hostvars.localhost.secrets_storage_to_var_prefix + '_portal_config_server') }}"
#         secret_data: "{{ webportal_server_config }}"
