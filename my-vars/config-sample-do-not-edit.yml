# This config file can be used to set any ansible variables needed to execute
# necessary ansible playbooks. These settings when used will also override
# values defined in playbooks/group_vars/webportals.yml.

###############################################################################
# REQUIRED
#
# Below are a list of variables that require attention if the defaults are not
# suitable.
###############################################################################

###############################################################################
# Server Setup
#
# Below are some of the recommended server level settings for portals. If you
# wish to disable any of these settings, uncomment the variable and change the
# value.
#
# PLEASE NOTE: We have not tested any non-default conditions for these
# settings, so you should be comfortable debugging the server and portal on
# your own if you plan to change these settings.
#
# Setup basic security (default: True)
# Creates sudo users, adds SSH keys, executes geerlingguy.security Ansible
# role (secures SSH etc.).
# setup_basic_security: True
#
# Enable fail2ban (default: True)
# Requires: setup_basic_security: True
# Fail2ban is a security tool to protect servers from brute-force attacks for
# various services, e.g. SSH.
# security_fail2ban_enabled: True
#
# Set server timezone (default: True)
# Based on your system, e.g. UTC timezone should be set as "UTC" or "Etc/UTC"
# webportal_server_set_timezone: True
# webportal_server_timezone: "UTC"
#
# Update server hostname (default: True)
# The script will update server hostname to Ansible inventory_hostname as
# defined in your inventory/hosts.ini (to e.g.: "skynet-node-01")
# webportal_update_hostname: True
#
# Setup UFW firewall (default: True)
# setup_ufw: True
#
# Deny outgoing traffic to local networks via UFW (default: True)
# Requires: setup_ufw: True
# Some services used to scan local networks, so according to server providers'
# advice operators can disable outgoing traffic to local networks. This might
# disrupt existing services (other than skynet portal stack) on the server.
# ufw_deny_outgoing_to_local_network: True
#
# Block Tor traffic (default: True)
# Anonymous Tor traffic can bring a significant load to the portal and can
# increase overhead handling abuse of Skynet portal service. By default portal
# setup blocks Tor traffic. If you once blocked Tor traffic and want to allow/
# unblock it later, you need to set the following variable to False and undo
# the setup manually (see config variable block_tor_exit_nodes_lists in
# webportals.yml and an Ansible task
# playbooks/tasks/portal-firewall-iptables-block-tor-exit-nodes.yml)
# - remove root cron job
# - remove iptables rules
# - remove ipsets
# block_tor_exit_nodes: True

###############################################################################
# Plantext secrets storage
#
# Plaintext secrets storage can be used for managing secrets with Ansible, such
# as server config files and login information.

# You can uncomment and edit following settings if you do not want to use
# defaults from playbooks/group_vars/webportals.yml:

# Subdirectory inside `ansible-private` repository where Skynet secrets are
# stored. The default subdirectory content is gitignored, so secrets are not
# commited and can't leak from remore git repository. Portal operator should
# backup plaintext secrets in this subdirectory using his preffered way.
# Default: "plaintext-secrets"
# plaintext_secrets_dir: "plaintext-secrets"

# Subfolders inside the above folder:
#
# plaintext_portal_credentials_server_subfolder: "portal-server-credentials"
# plaintext_portal_config_common_subfolder: "portal-common-configs"
# plaintext_portal_config_cluster_subfolder: "portal-cluster-configs"
# plaintext_portal_config_server_subfolder: "portal-server-configs"

# Common config is optional. It is useful if you run several clusters and want
# to extract some common values from multiple cluster configs to a common
# config. Otherwise you can use just one or several cluster configs.
# Operators with a single cluster will use just one cluster-{...}.yaml in the
# list. Operators with multiple clusters (e.g. dev and prod clusters or e.g.
# paid-only prod1 and allow-anonymous access prod2 clusters) will have several
# cluster-{...}.yml which is still covered with the default configs list. They
# have however option to extract common, shared values for all clusters from
# multiple cluster-{...}.yml configs to a common.yml. If a setting is present
# in several levels (both common and cluster) the setting in earlier config in
# the list (common.yml) is overriden with later config in the list
# (cluster-{...}.yml).
#
# plaintext_portal_common_and_cluster_configs_list:
#  # - "{{ plaintext_ansible_dir }}/{{ plaintext_portal_config_common_subfolder }}/common.yml"
#  - "{{ plaintext_ansible_dir }}/{{ plaintext_portal_config_cluster_subfolder }}/cluster-{{ portal_cluster_id }}.yml"

###############################################################################
# HashiCorp Vault secrets storage
#
# HashiCorp Vault can be used for managing secrets with Ansible, such as
# server config files and login information.
#
# HashiCorp storage backend directory
# You need to set this if you are using HashiCorp Vault.
# When you install HashiCorp Vault you can create one or more storage backends
# within where your secrets will be stored. Following variable should be set to
# your storage backend directory:
# Example (key/value storage backend v2):
# hashicorp_vault_storage_backend_dir: "kv/data"
#
hashicorp_vault_storage_backend_dir: ""

# You can uncomment and edit following settings if you do not want to use
# defaults from playbooks/group_vars/webportals.yml:

# Folder inside your storage backend that will contain subfolders.
# Default: "ansible-skynet"
#
# hashicorp_vault_ansible_dir: "ansible-skynet"

# Subfolders inside the above folder:
#
# hashicorp_vault_portal_credentials_server_subfolder: "portal-server-credentials"
# hashicorp_vault_portal_config_common_subfolder: "portal-common-configs"
# hashicorp_vault_portal_config_cluster_subfolder: "portal-cluster-configs"
# hashicorp_vault_portal_config_server_subfolder: "portal-server-configs"

# Common config is optional. It is useful if you run several clusters and want
# to extract some common values from multiple cluster configs to a common
# config. Otherwise you can use just one or several cluster configs.
# Operators with a single cluster will use just one cluster-{...}.yaml in the
# list. Operators with multiple clusters (e.g. dev and prod clusters or e.g.
# paid-only prod1 and allow-anonymous access prod2 clusters) will have several
# cluster-{...}.yml which is still covered with the default configs list. They
# have however option to extract common, shared values for all clusters from
# multiple cluster-{...}.yml configs to a common.yml. If a setting is present
# in several levels (both common and cluster) the setting in earlier config in
# the list (common.yml) is overriden with later config in the list
# (cluster-{...}.yml).
#
# hashicorp_vault_portal_common_and_cluster_configs_list:
#   # - "{{ hashicorp_vault_ansible_dir }}/{{ hashicorp_vault_portal_config_common_subfolder }}/common.yml"
#   - "{{ hashicorp_vault_ansible_dir }}/{{ hashicorp_vault_portal_config_cluster_subfolder }}/cluster-{{ portal_cluster_id }}.yml"

###############################################################################
# LastPass secrets storage
#
# LastPass can be used for managing secrets with Ansible, such as server config
# files and login information.
#
# You can uncomment and edit following settings if you do not want to use
# defaults from playbooks/group_vars/webportals.yml:
#
# lastpass_ansible_dir is the folder name in lastpass that contains server login
# information. The default is `Shared-Ansible`. You can either create this
# folder in LastPass or rename this variable to the folder name you desired.
#
# Default: "Shared-Ansible"
#
# lastpass_ansible_dir: "Shared-Ansible"

# The Following are the subfolder names of the lastpass_ansible_dir folder in
# lastpass. The contents of these folders are controlled by ansible. Below are
# the default values. You can either create these folders in LastPass or rename
# these variable to the folder name you desired.
#
# lastpass_portal_credentials_server_subfolder: "portal-server-credentials"
# lastpass_portal_config_common_subfolder: "portal-common-configs"
# lastpass_portal_config_cluster_subfolder: "portal-cluster-configs"
# lastpass_portal_config_server_subfolder: "portal-server-configs"

# Common config is optional. It is useful if you run several clusters and want
# to extract some common values from multiple cluster configs to a common
# config. Otherwise you can use just one or several cluster configs.
# Operators with a single cluster will use just one cluster-{...}.yaml in the
# list. Operators with multiple clusters (e.g. dev and prod clusters or e.g.
# paid-only prod1 and allow-anonymous access prod2 clusters) will have several
# cluster-{...}.yml which is still covered with the default configs list. They
# have however option to extract common, shared values for all clusters from
# multiple cluster-{...}.yml configs to a common.yml. If a setting is present
# in several levels (both common and cluster) the setting in earlier config in
# the list (common.yml) is overriden with later config in the list
# (cluster-{...}.yml).
#
# Variables lastpass_directory_separator and lastpass_file_separator are used
# to automatically handle LastPass directory inconsistency between shared and
# non-shared folders, they should be kept and should not be changed.
#
# lastpass_portal_common_and_cluster_configs_list:
#   # - "{{ lastpass_ansible_dir }}{{ lastpass_directory_separator }}{{ lastpass_portal_config_common_subfolder }}{{ lastpass_file_separator }}common.yml"
#   - "{{ lastpass_ansible_dir }}{{ lastpass_directory_separator }}{{ lastpass_portal_config_cluster_subfolder }}{{ lastpass_file_separator }}cluster-{{ portal_cluster_id }}.yml"

###############################################################################
# SSH Access
#
# During portals-setup-initial and portal-setup-following, if variable
# setup_basic_security is set to True (default: True) Ansible will add a single
# or a list of authorized SSH public keys to your server, will disable root SSH
# login and user passwords logins, the only way to SSH to your server is using
# your public SSH key(s). Ansible can pull your public SSH keys (usually
# located at ~/.ssh/authorized_keys) from a url, like a GitHub repo or you can
# add your key(s) as strings. You can add multiple keys which is helpful if you
# are planning on managing a server with a team.
#
# Example
#
# Authorized keys from URL
# Need to change to URL to your file containing your public SSH authorized_keys
# webportal_user_authorized_keys: "https://raw.githubusercontent.com/SkynetLabs/public-ssh-authorized-keys/authorized_keys"
#
# Authorized key as a string (just one key)
# Need to change to your public SSH key
# webportal_user_authorized_keys: "ssh-ed25519 XXXXX3NzaC1lZDI1NTE5XXXXXNbAhwjJNAud7YIJvLth2bmeUg3XXXXXl7ZfqBTvoXn8 me@example.com"
#
# Authorized keys as strings (multiple keys)
# Need to change to allowed public SSH keys (note pipe character and indenting)
# webportal_user_authorized_keys: |
#   ssh-ed25519 XXXXX3NzaC1lZDI1NTE5XXXXXNbAhwjJNAud7YIJvLth2bmeUg3XXXXXl7ZfqBTvoXn8 me@example.com
#   ssh-ed25519 YYYYY3NzaC1lZDI1NTE5YYYYYNbAhwjJNAud7YIJvLth2bmeUg3YYYYYl7ZfqBTvoXn8 my-cat@example.com
#   ssh-ed25519 ZZZZZ3NzaC1lZDI1NTE5ZZZZZNbAhwjJNAud7YIJvLth2bmeUg3ZZZZZl7ZfqBTvoXn8 my-dog@example.com
webportal_user_authorized_keys: ""

###############################################################################
# Emails
#
# There are two places emails are required. One is for ssl certificate
# generation and one is for git checkout commands.
#
# The ssl_support_email can be whatever email you would like.
#
# The git_checkout_email should be the email associated with your GitHub
# account.
ssl_support_email: ""
git_checkout_email: ""

###############################################################################
# OPTIONAL
#
# Below are a list of variables that are optional depending on the playbook you
# are running.
###############################################################################

# Deploying a custom website for your portal is supported by defining a
# dockerfile for your website.
#
# The custom website dockerfile can be defined in the following ways:
#
# If you have a simple repo with a Dockerfile at the root level, you simply
# define a website_custom_build variable that is the https git url with a target
# branch defined.
# website_custom_build: https://github.com/user/website-repo.git#main
#
# or
#
# If you have a repo where the Dockerfile is not at the root level, you will
# need to define a website_custom_build_context which is the https git url with
# a target branch defined and a website_custom_build_dockerfile which is the
# relative path to the dockerfile in the repository.
# website_custom_build_context: https://github.com/user/website-repo.git#main
# website_custom_build_dockerfile: ./path/to/Dockerfile
#
# If you need to define a custom website dockerfile, simply uncomment and define
# the variables you need based on the above options.
# website_custom_build:
# website_custom_build_context:
# website_custom_build_dockerfile:

# Custom docker images.
#
# If you want to override a docker image for a specific service, you can do so
# by defining the service and image in the docker_image_overrides variable.
#
# docker_image_overrides:
#   - { service: "website", image: "skynetlabs/website-skynetpro-net" }
#   - { service: "blocker", image: "skynetlabs/blocker" }

# Set the skynet-webportal, skyd, and accounts versions by entering a git
# branch, git tag or git commit.
portal_repo_version: "..."
portal_skyd_version: "..."
portal_accounts_version: "..."
